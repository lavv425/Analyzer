{"ast":null,"code":"class Matcher {\n  /**\n   * constructor\n   *\n   * @returns\n   */\n  constructor() {\n    this.condMapper = {\n      '=': 'isEqual',\n      eq: 'isEqual',\n      '!=': 'isNotEqual',\n      neq: 'isNotEqual',\n      '==': 'isStrictEqual',\n      seq: 'isStrictEqual',\n      '!==': 'isStrictNotEqual',\n      sneq: 'isStrictNotEqual',\n      '>': 'isGreater',\n      gt: 'isGreater',\n      '<': 'isLess',\n      lt: 'isLess',\n      '>=': 'isGreaterOrEqual',\n      gte: 'isGreaterOrEqual',\n      '<=': 'isLessOrEqual',\n      lte: 'isLessOrEqual',\n      in: 'isIn',\n      notin: 'isNotIn',\n      null: 'isNull',\n      notnull: 'isNotNull',\n      startswith: 'isStartWith',\n      endswith: 'isEndWith',\n      contains: 'isContain',\n      match: 'hasMatch',\n      macro: 'execMacro'\n    };\n  }\n\n  /**\n   * isEqual - Checks if the given values are equal\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isEqual(a, b) {\n    return a == b;\n  }\n\n  /**\n   * isStrictEqual - Checks if the given values are Strictly equal\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isStrictEqual(a, b) {\n    return a === b;\n  }\n\n  /**\n   * isNotEqual - Checks if the given values are not equal\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isNotEqual(a, b) {\n    return a != b;\n  }\n\n  /**\n   * isStrictNotEqual - Checks if the given values are Strictly not equal\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isStrictNotEqual(a, b) {\n    return a !== b;\n  }\n\n  /**\n   * isGreater - Checks if the given value 'a' is greater than given value 'b'\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isGreater(a, b) {\n    return a > b;\n  }\n\n  /**\n   * isLess - Checks if the given value 'a' is less than given value 'b'\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isLess(a, b) {\n    return a < b;\n  }\n\n  /**\n   * isGreaterOrEqual - Checks if the given value 'a' is greater or equal\n   * than given value 'b'\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isGreaterOrEqual(a, b) {\n    return a >= b;\n  }\n\n  /**\n   * isLessOrEqual - Checks if the given value 'a' is less or equal\n   * than given value 'b'\n   *\n   * @param {mixed} a\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  isLessOrEqual(a, b) {\n    return a <= b;\n  }\n\n  /**\n   * isIn - Checks if the given 'key' is in given array 'arr'\n   *\n   * @param {mixed} key\n   * @param {Array} arr\n   *\n   * @returns {bool}\n   */\n  isIn(key, arr) {\n    return Array.isArray(arr) && arr.includes(key);\n  }\n\n  /**\n   * isNotIn - Checks if the given 'key' is not in given array 'arr'\n   *\n   * @param {mixed} key\n   * @param {Array} arr\n   *\n   * @returns {bool}\n   */\n  isNotIn(key, arr) {\n    return Array.isArray(arr) && !arr.includes(key);\n  }\n\n  /**\n   * isNull - Checks if the given 'val' is null\n   *\n   * @param {mixed} val\n   *\n   * @returns {bool}\n   */\n  isNull(val) {\n    return val === null;\n  }\n\n  /**\n   * isNotNull - Checks if the given 'val' is not null\n   *\n   * @param {mixed} val\n   *\n   * @returns {bool}\n   */\n  isNotNull(val) {\n    return val !== null;\n  }\n\n  /**\n   * isStartWith - Checks if the given string 'str' starts with given 'val'\n   *\n   * @param {string} str\n   * @param {string} val\n   *\n   * @returns {bool}\n   */\n  isStartWith(str, val) {\n    return str.startsWith(val);\n  }\n\n  /**\n   * isEndWith - Checks if the given string 'str' ends with given 'val'\n   *\n   * @param {string} str\n   * @param {string} val\n   *\n   * @returns {bool}\n   */\n  isEndWith(str, val) {\n    return str.endsWith(val);\n  }\n\n  /**\n   * isContain - Checks if the given string 'str' contains given 'val'\n   *\n   * @param {string} str\n   * @param {string} val\n   *\n   * @returns {bool}\n   */\n  isContain(str, val) {\n    return str.includes(val);\n  }\n\n  /**\n   * hasMatch - Checks if the given string 'str' has a match for given RegExp\n   *\n   * @param {string} str\n   * @param {RegExp} pattern\n   *\n   * @returns {bool}\n   */\n  hasMatch(str, pattern) {\n    return RegExp(pattern).test(str);\n  }\n\n  /**\n   * execMacro - execute the given Function and returns the result based on that\n   *\n   * @param {mixed} val\n   * @param {Function} fn\n   *\n   * @returns {bool}\n   */\n  execMacro(val, fn) {\n    if (fn instanceof Function) {\n      return fn(val);\n    }\n    return false;\n  }\n\n  /**\n   * check - compare the given 'a' and 'b' based on 'op'\n   *\n   * @param {mixed} a\n   * @param {string} op\n   * @param {mixed} b\n   *\n   * @returns {bool}\n   */\n  check(a, op, b) {\n    if (!(op in this.condMapper)) {\n      throw Error('Invalid where condition given');\n    }\n    return this[this.condMapper[op]](a, b);\n  }\n}\nmodule.exports = Matcher;","map":{"version":3,"names":["Matcher","constructor","condMapper","eq","neq","seq","sneq","gt","lt","gte","lte","in","notin","null","notnull","startswith","endswith","contains","match","macro","isEqual","a","b","isStrictEqual","isNotEqual","isStrictNotEqual","isGreater","isLess","isGreaterOrEqual","isLessOrEqual","isIn","key","arr","Array","isArray","includes","isNotIn","isNull","val","isNotNull","isStartWith","str","startsWith","isEndWith","endsWith","isContain","hasMatch","pattern","RegExp","test","execMacro","fn","Function","check","op","Error","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/ticket/analyzer/node_modules/js-jsonq/Matcher.js"],"sourcesContent":["class Matcher {\n    /**\n     * constructor\n     *\n     * @returns\n     */\n    constructor() {\n        this.condMapper = {\n            '=': 'isEqual',\n            eq: 'isEqual',\n            '!=': 'isNotEqual',\n            neq: 'isNotEqual',\n            '==': 'isStrictEqual',\n            seq: 'isStrictEqual',\n            '!==': 'isStrictNotEqual',\n            sneq: 'isStrictNotEqual',\n            '>': 'isGreater',\n            gt: 'isGreater',\n            '<': 'isLess',\n            lt: 'isLess',\n            '>=': 'isGreaterOrEqual',\n            gte: 'isGreaterOrEqual',\n            '<=': 'isLessOrEqual',\n            lte: 'isLessOrEqual',\n            in: 'isIn',\n            notin: 'isNotIn',\n            null: 'isNull',\n            notnull: 'isNotNull',\n            startswith: 'isStartWith',\n            endswith: 'isEndWith',\n            contains: 'isContain',\n            match: 'hasMatch',\n            macro: 'execMacro'\n        };\n    }\n\n    /**\n     * isEqual - Checks if the given values are equal\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isEqual(a, b) {\n        return a == b;\n    }\n\n    /**\n     * isStrictEqual - Checks if the given values are Strictly equal\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isStrictEqual(a, b) {\n        return a === b;\n    }\n\n    /**\n     * isNotEqual - Checks if the given values are not equal\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isNotEqual(a, b) {\n        return a != b;\n    }\n\n    /**\n     * isStrictNotEqual - Checks if the given values are Strictly not equal\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isStrictNotEqual(a, b) {\n        return a !== b;\n    }\n\n    /**\n     * isGreater - Checks if the given value 'a' is greater than given value 'b'\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isGreater(a, b) {\n        return a > b;\n    }\n\n    /**\n     * isLess - Checks if the given value 'a' is less than given value 'b'\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isLess(a, b) {\n        return a < b;\n    }\n\n    /**\n     * isGreaterOrEqual - Checks if the given value 'a' is greater or equal\n     * than given value 'b'\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isGreaterOrEqual(a, b) {\n        return a >= b;\n    }\n\n    /**\n     * isLessOrEqual - Checks if the given value 'a' is less or equal\n     * than given value 'b'\n     *\n     * @param {mixed} a\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    isLessOrEqual(a, b) {\n        return a <= b;\n    }\n\n    /**\n     * isIn - Checks if the given 'key' is in given array 'arr'\n     *\n     * @param {mixed} key\n     * @param {Array} arr\n     *\n     * @returns {bool}\n     */\n    isIn(key, arr) {\n        return Array.isArray(arr) && arr.includes(key);\n    }\n\n    /**\n     * isNotIn - Checks if the given 'key' is not in given array 'arr'\n     *\n     * @param {mixed} key\n     * @param {Array} arr\n     *\n     * @returns {bool}\n     */\n    isNotIn(key, arr) {\n        return Array.isArray(arr) && !arr.includes(key);\n    }\n\n    /**\n     * isNull - Checks if the given 'val' is null\n     *\n     * @param {mixed} val\n     *\n     * @returns {bool}\n     */\n    isNull(val) {\n        return val === null;\n    }\n\n    /**\n     * isNotNull - Checks if the given 'val' is not null\n     *\n     * @param {mixed} val\n     *\n     * @returns {bool}\n     */\n    isNotNull(val) {\n        return val !== null;\n    }\n\n    /**\n     * isStartWith - Checks if the given string 'str' starts with given 'val'\n     *\n     * @param {string} str\n     * @param {string} val\n     *\n     * @returns {bool}\n     */\n    isStartWith(str, val) {\n        return str.startsWith(val);\n    }\n\n    /**\n     * isEndWith - Checks if the given string 'str' ends with given 'val'\n     *\n     * @param {string} str\n     * @param {string} val\n     *\n     * @returns {bool}\n     */\n    isEndWith(str, val) {\n        return str.endsWith(val);\n    }\n\n    /**\n     * isContain - Checks if the given string 'str' contains given 'val'\n     *\n     * @param {string} str\n     * @param {string} val\n     *\n     * @returns {bool}\n     */\n    isContain(str, val) {\n        return str.includes(val);\n    }\n\n    /**\n     * hasMatch - Checks if the given string 'str' has a match for given RegExp\n     *\n     * @param {string} str\n     * @param {RegExp} pattern\n     *\n     * @returns {bool}\n     */\n    hasMatch(str, pattern) {\n        return RegExp(pattern).test(str);\n    }\n\n    /**\n     * execMacro - execute the given Function and returns the result based on that\n     *\n     * @param {mixed} val\n     * @param {Function} fn\n     *\n     * @returns {bool}\n     */\n    execMacro(val, fn) {\n        if (fn instanceof Function) {\n            return fn(val);\n        }\n\n        return false;\n    }\n\n    /**\n     * check - compare the given 'a' and 'b' based on 'op'\n     *\n     * @param {mixed} a\n     * @param {string} op\n     * @param {mixed} b\n     *\n     * @returns {bool}\n     */\n    check(a, op, b) {\n        if (!(op in this.condMapper)) {\n            throw Error('Invalid where condition given');\n        }\n\n        return this[this.condMapper[op]](a, b);\n    }\n}\n\nmodule.exports = Matcher;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}