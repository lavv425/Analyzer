{"ast":null,"code":"/**\n * parseJson - parse Json Data from a given filePath\n * or a Json String or Json Object\n *\n * @param {string|Object} json\n *\n * @returns {Object} the parsed Json Object\n * @throws {Error}\n */\nconst parseJson = json => {\n  let jsonObject = json;\n  if ((typeof json === 'string' || json instanceof String) && json.endsWith('.json')) {\n    jsonObject = require.resolve(\"\".concat(json));\n  }\n  if (typeof jsonObject === 'string' || jsonObject instanceof String) {\n    try {\n      jsonObject = JSON.parse(json);\n    } catch (e) {\n      throw Error('Invalid Json data');\n    }\n  }\n  if (!(Array.isArray(jsonObject) || jsonObject instanceof Object)) {\n    throw Error('Invalid Json data');\n  }\n  return jsonObject;\n};\n\n/**\n * getByProperty - get the content of the Data by the given property\n *\n * @param {string} property\n * @param {Array|Object} data\n *\n * @returns {mixed}\n * @throws {Error}\n */\nconst getByProperty = (property, data) => {\n  if (!(property in data)) {\n    throw Error('Data not exists');\n  }\n  return data[property];\n};\n\n/**\n * compare - compare the values based on the given ordering (could be ascending,\n * descending or by the given method )\n *\n * @param {int|float|string} a\n * @param {int|float|string} b\n * @param {string|Function} order\n *\n * @returns {int} 0 or 1 or -1\n */\nconst compare = (a, b, order) => {\n  //if a comparison method is given as third parameter\n  if (order instanceof Function) {\n    return order(a, b);\n  } else {\n    if (typeof a === 'string' || a instanceof String) {\n      a = a.toLowerCase();\n    }\n    if (typeof b === 'string' || b instanceof String) {\n      b = b.toLowerCase();\n    }\n\n    //comparison\n    if (a < b) {\n      return order == 'asc' ? -1 : 1;\n    } else if (a > b) {\n      return order == 'asc' ? 1 : -1;\n    }\n    return 0;\n  }\n};\nmodule.exports = {\n  parseJson,\n  getByProperty,\n  compare\n};","map":{"version":3,"names":["parseJson","json","jsonObject","String","endsWith","require","resolve","concat","JSON","parse","e","Error","Array","isArray","Object","getByProperty","property","data","compare","a","b","order","Function","toLowerCase","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/ticket/analyzer/node_modules/js-jsonq/Helpers.js"],"sourcesContent":["/**\n * parseJson - parse Json Data from a given filePath\n * or a Json String or Json Object\n *\n * @param {string|Object} json\n *\n * @returns {Object} the parsed Json Object\n * @throws {Error}\n */\nconst parseJson = json => {\n    let jsonObject = json;\n\n    if (\n        (typeof json === 'string' || json instanceof String) &&\n        json.endsWith('.json')\n    ) {\n        jsonObject = require.resolve(`${json}`);\n    }\n\n    if (typeof jsonObject === 'string' || jsonObject instanceof String) {\n        try {\n            jsonObject = JSON.parse(json);\n        } catch (e) {\n            throw Error('Invalid Json data');\n        }\n    }\n\n    if (!(Array.isArray(jsonObject) || jsonObject instanceof Object)) {\n        throw Error('Invalid Json data');\n    }\n\n    return jsonObject;\n};\n\n/**\n * getByProperty - get the content of the Data by the given property\n *\n * @param {string} property\n * @param {Array|Object} data\n *\n * @returns {mixed}\n * @throws {Error}\n */\nconst getByProperty = (property, data) => {\n    if (!(property in data)) {\n        throw Error('Data not exists');\n    }\n\n    return data[property];\n};\n\n/**\n * compare - compare the values based on the given ordering (could be ascending,\n * descending or by the given method )\n *\n * @param {int|float|string} a\n * @param {int|float|string} b\n * @param {string|Function} order\n *\n * @returns {int} 0 or 1 or -1\n */\nconst compare = (a, b, order) => {\n    //if a comparison method is given as third parameter\n    if (order instanceof Function) {\n        return order(a, b);\n    } else {\n        if (typeof a === 'string' || a instanceof String) {\n            a = a.toLowerCase();\n        }\n\n        if (typeof b === 'string' || b instanceof String) {\n            b = b.toLowerCase();\n        }\n\n        //comparison\n        if (a < b) {\n            return order == 'asc' ? -1 : 1;\n        } else if (a > b) {\n            return order == 'asc' ? 1 : -1;\n        }\n\n        return 0;\n    }\n};\n\nmodule.exports = {\n    parseJson,\n    getByProperty,\n    compare\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAGC,IAAI,IAAI;EACtB,IAAIC,UAAU,GAAGD,IAAI;EAErB,IACI,CAAC,OAAOA,IAAI,KAAK,QAAQ,IAAIA,IAAI,YAAYE,MAAM,KACnDF,IAAI,CAACG,QAAQ,CAAC,OAAO,CAAC,EACxB;IACEF,UAAU,GAAGG,OAAO,CAACC,OAAO,IAAAC,MAAA,CAAIN,IAAI,CAAE,CAAC;EAC3C;EAEA,IAAI,OAAOC,UAAU,KAAK,QAAQ,IAAIA,UAAU,YAAYC,MAAM,EAAE;IAChE,IAAI;MACAD,UAAU,GAAGM,IAAI,CAACC,KAAK,CAACR,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOS,CAAC,EAAE;MACR,MAAMC,KAAK,CAAC,mBAAmB,CAAC;IACpC;EACJ;EAEA,IAAI,EAAEC,KAAK,CAACC,OAAO,CAACX,UAAU,CAAC,IAAIA,UAAU,YAAYY,MAAM,CAAC,EAAE;IAC9D,MAAMH,KAAK,CAAC,mBAAmB,CAAC;EACpC;EAEA,OAAOT,UAAU;AACrB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMa,aAAa,GAAGA,CAACC,QAAQ,EAAEC,IAAI,KAAK;EACtC,IAAI,EAAED,QAAQ,IAAIC,IAAI,CAAC,EAAE;IACrB,MAAMN,KAAK,CAAC,iBAAiB,CAAC;EAClC;EAEA,OAAOM,IAAI,CAACD,QAAQ,CAAC;AACzB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,OAAO,GAAGA,CAACC,CAAC,EAAEC,CAAC,EAAEC,KAAK,KAAK;EAC7B;EACA,IAAIA,KAAK,YAAYC,QAAQ,EAAE;IAC3B,OAAOD,KAAK,CAACF,CAAC,EAAEC,CAAC,CAAC;EACtB,CAAC,MAAM;IACH,IAAI,OAAOD,CAAC,KAAK,QAAQ,IAAIA,CAAC,YAAYhB,MAAM,EAAE;MAC9CgB,CAAC,GAAGA,CAAC,CAACI,WAAW,CAAC,CAAC;IACvB;IAEA,IAAI,OAAOH,CAAC,KAAK,QAAQ,IAAIA,CAAC,YAAYjB,MAAM,EAAE;MAC9CiB,CAAC,GAAGA,CAAC,CAACG,WAAW,CAAC,CAAC;IACvB;;IAEA;IACA,IAAIJ,CAAC,GAAGC,CAAC,EAAE;MACP,OAAOC,KAAK,IAAI,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;IAClC,CAAC,MAAM,IAAIF,CAAC,GAAGC,CAAC,EAAE;MACd,OAAOC,KAAK,IAAI,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAClC;IAEA,OAAO,CAAC;EACZ;AACJ,CAAC;AAEDG,MAAM,CAACC,OAAO,GAAG;EACbzB,SAAS;EACTe,aAAa;EACbG;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}