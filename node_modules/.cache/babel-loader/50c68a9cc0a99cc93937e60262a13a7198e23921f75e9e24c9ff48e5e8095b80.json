{"ast":null,"code":"const Matcher = require('./Matcher');\nclass QueryManager {\n  /**\n   * constructor\n   *\n   * @returns\n   */\n  constructor() {\n    this._matcher = new Matcher();\n    this.init();\n  }\n\n  /**\n   * init - initialize the QueryManager instance\n   *\n   * @returns\n   */\n  init() {\n    this._queries = [];\n    this._currentQueryInd = 0;\n  }\n\n  /**\n   * reset - reset the _queries and _currentQueryInd values to initial state\n   *\n   * @returns\n   */\n  reset() {\n    this.init();\n  }\n\n  /**\n   * createQueryGroup - increment the _currentQueryInd to add another Or query\n   *\n   * @returns\n   */\n  createQueryGroup() {\n    this._currentQueryInd++;\n  }\n\n  /**\n   * insertQuery - insert a new query to the _queries list\n   *\n   * @param {Object} query Objcet of the form {'key': key, 'op': op, 'val': val}\n   *\n   * @returns\n   */\n  insertQuery(query) {\n    const index = this._currentQueryInd;\n    if (!(index in this._queries)) {\n      this._queries.push([]);\n    }\n    this._queries[index].push(query);\n  }\n\n  /**\n   * _executeQueries - execute and filter given data based on the queries added\n   * in the _queries list\n   *\n   * @param {Array} data\n   *\n   * @returns {Array} filtered data\n   */\n  _executeQueries(data) {\n    return data.filter(elem => {\n      let orPassed = false;\n      for (const queryList of this._queries) {\n        let andPassed = true;\n        for (const query of queryList) {\n          andPassed &= this._matcher.check(elem[query.key], query.op, query.val);\n        }\n        orPassed |= andPassed;\n      }\n      return orPassed;\n    });\n  }\n\n  /**\n   * prepare - execute the queries and filter the data based on that\n   *\n   * @param {Array} data\n   *\n   * @returns {Array} filtered data\n   */\n  prepare(data) {\n    if (this._queries.length > 0) {\n      data = this._executeQueries(data);\n      this._queries = [];\n      this._currentQueryInd = 0;\n    }\n    return data;\n  }\n}\nmodule.exports = QueryManager;","map":{"version":3,"names":["Matcher","require","QueryManager","constructor","_matcher","init","_queries","_currentQueryInd","reset","createQueryGroup","insertQuery","query","index","push","_executeQueries","data","filter","elem","orPassed","queryList","andPassed","check","key","op","val","prepare","length","module","exports"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/projects/ticket/analyzer/node_modules/js-jsonq/QueryManager.js"],"sourcesContent":["const Matcher = require('./Matcher');\n\nclass QueryManager {\n    /**\n     * constructor\n     *\n     * @returns\n     */\n    constructor() {\n        this._matcher = new Matcher();\n        this.init();\n    }\n\n    /**\n     * init - initialize the QueryManager instance\n     *\n     * @returns\n     */\n    init() {\n        this._queries = [];\n        this._currentQueryInd = 0;\n    }\n\n    /**\n     * reset - reset the _queries and _currentQueryInd values to initial state\n     *\n     * @returns\n     */\n    reset() {\n        this.init();\n    }\n\n    /**\n     * createQueryGroup - increment the _currentQueryInd to add another Or query\n     *\n     * @returns\n     */\n    createQueryGroup() {\n        this._currentQueryInd++;\n    }\n\n    /**\n     * insertQuery - insert a new query to the _queries list\n     *\n     * @param {Object} query Objcet of the form {'key': key, 'op': op, 'val': val}\n     *\n     * @returns\n     */\n    insertQuery(query) {\n        const index = this._currentQueryInd;\n        if (!(index in this._queries)) {\n            this._queries.push([]);\n        }\n\n        this._queries[index].push(query);\n    }\n\n    /**\n     * _executeQueries - execute and filter given data based on the queries added\n     * in the _queries list\n     *\n     * @param {Array} data\n     *\n     * @returns {Array} filtered data\n     */\n    _executeQueries(data) {\n        return data.filter(elem => {\n            let orPassed = false;\n            for (const queryList of this._queries) {\n                let andPassed = true;\n                for (const query of queryList) {\n                    andPassed &= this._matcher.check(\n                        elem[query.key],\n                        query.op,\n                        query.val\n                    );\n                }\n\n                orPassed |= andPassed;\n            }\n\n            return orPassed;\n        });\n    }\n\n    /**\n     * prepare - execute the queries and filter the data based on that\n     *\n     * @param {Array} data\n     *\n     * @returns {Array} filtered data\n     */\n    prepare(data) {\n        if (this._queries.length > 0) {\n            data = this._executeQueries(data);\n\n            this._queries = [];\n            this._currentQueryInd = 0;\n        }\n\n        return data;\n    }\n}\n\nmodule.exports = QueryManager;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;AAEpC,MAAMC,YAAY,CAAC;EACf;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,QAAQ,GAAG,IAAIJ,OAAO,CAAC,CAAC;IAC7B,IAAI,CAACK,IAAI,CAAC,CAAC;EACf;;EAEA;AACJ;AACA;AACA;AACA;EACIA,IAAIA,CAAA,EAAG;IACH,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,gBAAgB,GAAG,CAAC;EAC7B;;EAEA;AACJ;AACA;AACA;AACA;EACIC,KAAKA,CAAA,EAAG;IACJ,IAAI,CAACH,IAAI,CAAC,CAAC;EACf;;EAEA;AACJ;AACA;AACA;AACA;EACII,gBAAgBA,CAAA,EAAG;IACf,IAAI,CAACF,gBAAgB,EAAE;EAC3B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIG,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMC,KAAK,GAAG,IAAI,CAACL,gBAAgB;IACnC,IAAI,EAAEK,KAAK,IAAI,IAAI,CAACN,QAAQ,CAAC,EAAE;MAC3B,IAAI,CAACA,QAAQ,CAACO,IAAI,CAAC,EAAE,CAAC;IAC1B;IAEA,IAAI,CAACP,QAAQ,CAACM,KAAK,CAAC,CAACC,IAAI,CAACF,KAAK,CAAC;EACpC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,eAAeA,CAACC,IAAI,EAAE;IAClB,OAAOA,IAAI,CAACC,MAAM,CAACC,IAAI,IAAI;MACvB,IAAIC,QAAQ,GAAG,KAAK;MACpB,KAAK,MAAMC,SAAS,IAAI,IAAI,CAACb,QAAQ,EAAE;QACnC,IAAIc,SAAS,GAAG,IAAI;QACpB,KAAK,MAAMT,KAAK,IAAIQ,SAAS,EAAE;UAC3BC,SAAS,IAAI,IAAI,CAAChB,QAAQ,CAACiB,KAAK,CAC5BJ,IAAI,CAACN,KAAK,CAACW,GAAG,CAAC,EACfX,KAAK,CAACY,EAAE,EACRZ,KAAK,CAACa,GACV,CAAC;QACL;QAEAN,QAAQ,IAAIE,SAAS;MACzB;MAEA,OAAOF,QAAQ;IACnB,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIO,OAAOA,CAACV,IAAI,EAAE;IACV,IAAI,IAAI,CAACT,QAAQ,CAACoB,MAAM,GAAG,CAAC,EAAE;MAC1BX,IAAI,GAAG,IAAI,CAACD,eAAe,CAACC,IAAI,CAAC;MAEjC,IAAI,CAACT,QAAQ,GAAG,EAAE;MAClB,IAAI,CAACC,gBAAgB,GAAG,CAAC;IAC7B;IAEA,OAAOQ,IAAI;EACf;AACJ;AAEAY,MAAM,CAACC,OAAO,GAAG1B,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}